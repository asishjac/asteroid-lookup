/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.asteroids.service;


import com.asteroids.util.VicinityComparator;
import com.asteroids.model.AsteroidDetails;
import com.asteroids.model.CloseApproachData;
import com.asteroids.model.Feed;
import com.asteroids.model.NearEarthObject;
import com.asteroids.util.DateUtil;
import com.asteroids.util.ServiceConstants;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;


import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;


/**
 * Service Class. Gets the list of  asteroids from NASA at
 * https://api.nasa.gov/neo/rest/v1/feed?start_date=START_DATE&end_date=END_DATE&api_key=API_KEY
 * See documentation on the Asteroids - NeoWs API at https://api.nasa.gov/
 *
 * Prints the closest passing in  next week
 *
 * Set environment variable 'API_KEY' to override.
 */

@Service
public class AsteroidsAnalyzerService {
    private final String apiKey ;

    public AsteroidsAnalyzerService() {
        String key = System.getenv("API_KEY");
        if(key != null && !key.isBlank()) {
            this.apiKey = key;
        }else {
            this.apiKey = "rc0dJq5JCNnbVakOiXI8JH20LiAb10jsg7BJ998w";
        }
    }

    /**
     * Find asteroids close to earth
     */
    public List<AsteroidDetails> findAsteroids()   {
        List<AsteroidDetails>asteroidDetailsList=new ArrayList<>();
        LocalDate today = LocalDate.now();
        RestTemplate restTemplate = new RestTemplate();
        // Create a URL with query parameters
        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(ServiceConstants.NASA_API_URL+"/feed")
                .queryParam("start_date",  DateUtil.getStartDateOfCurrentWeek())
                .queryParam("end_date", DateUtil.getEndDateOfCurrentWeek())
                .queryParam("api_key", this.apiKey);
        System.out.println(builder.toUriString());
        // Set the Accept header to request JSON
        HttpHeaders headers = new HttpHeaders();
        headers.set(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE);
        HttpEntity<?> httpEntity = new HttpEntity<>(headers);
        ResponseEntity<Feed> feedResponseEntity = restTemplate.exchange(builder.toUriString(), HttpMethod.GET,httpEntity,Feed.class);

        if(feedResponseEntity.getStatusCode().value() == HttpStatus.OK.value()) {
            Feed neoFeed = feedResponseEntity.getBody();
            List<NearEarthObject> closest = getClosest(neoFeed.getAllObjects());
            asteroidDetailsList= mapNeoData(closest);
        }
        else {
            System.err.println("Failed querying feed, got " + feedResponseEntity.getStatusCode().value() + " ");
        }
        return  asteroidDetailsList;
    }


    /**
     * Get the closest passing.
     * @param neos the  list of NearEarthObjects
     * @return a list of closest earth objects
     */
    public List<NearEarthObject> getClosest(List<NearEarthObject> neos) {
        return neos.stream()
                .filter(this::isApproachingComingWeek)
                .sorted(new VicinityComparator())
                .collect(Collectors.toList());
    }

    private boolean isApproachingComingWeek(NearEarthObject neo) {
        if (neo.getCloseApproachData() == null) {
            return false;
        }
        return neo.getCloseApproachData().stream()
                .anyMatch(closeApproachData ->
                        DateUtil.isDateInCurrentWeek(closeApproachData.getCloseApproachEpochDate()));
    }

    /**
     * Map NearEarthObjects to AsteroidDetails.
     * @param  nearEarthObjectList :  list of NearEarthObjects
     * @return a list of AsteroidDetails
     */
    private List<AsteroidDetails> mapNeoData(List<NearEarthObject> nearEarthObjectList){
        System.out.println("Hazard?   Distance(km)    When                             Name");
        System.out.println("----------------------------------------------------------------------");
        List<AsteroidDetails> asteroidDetailsList = new ArrayList<>();
        for(NearEarthObject neo: nearEarthObjectList) {
            AsteroidDetails asteroidDetails = new AsteroidDetails();
            Optional<CloseApproachData> closestPass = neo.getCloseApproachData().stream()
                    .filter(closeApproachData -> DateUtil.isDateInCurrentWeek(closeApproachData.getCloseApproachEpochDate()))
                    .min(Comparator.comparing(CloseApproachData::getMissDistance));

            if(closestPass.isEmpty()) continue;

            /*System.out.printf("%s       %12.3f  %s    %s%n",
                    (neo.isPotentiallyHazardous() ? "!!!" : " - "),
                    closestPass.get().getMissDistance().getKilometers(),
                    closestPass.get().getCloseApproachDateTime(),
                    neo.getName()
            );*/
            asteroidDetails.setName(neo.getName());
            asteroidDetails.setNeoRefId(neo.getId());
            asteroidDetails.setNasaJplUrl(neo.getNplUrl());
            asteroidDetails.setPotentiallyHazardous(neo.isPotentiallyHazardous());
            asteroidDetails.setAbsoluteMagnitudeH(neo.getAbsoluteMagnitude());
            asteroidDetails.setOrbitingBody(closestPass.get().getOrbitingBody());
            asteroidDetails.setEstimatedDiameterMax(neo.getEstimatedDiameter().getKilometers().getMax());
            asteroidDetails.setEstimatedDiameterMin(neo.getEstimatedDiameter().getKilometers().getMin());
            asteroidDetails.setCloseApproachDateTime(closestPass.get().getCloseApproachDateTime());
            asteroidDetails.setMissDistanceInKilometer(closestPass.get().getMissDistance().getKilometers());
            asteroidDetails.setVelocityInKilometersPerHour(closestPass.get().getRelativeVelocity().getKilometersPerHour());
            asteroidDetailsList.add(asteroidDetails);
        }
        return asteroidDetailsList;
    }
}
